{"version":3,"file":"soucouyant.umd.js","sources":["../src/create-address.js","../src/state-object.js","../src/collection.js"],"sourcesContent":["import StateObject from './state-object';\n\nconst stateMachine = (state, stateObject) => callback => {\n    state = callback(state);\n    return state;\n}\n\n\nconst createAddress = (addressParts, count, state, length, isCollection, nextPart) => {\n    if (nextPart === null) {\n        const newPart = (addressParts[count] + '').trim();\n        if (StateObject[newPart] === undefined) {\n            nextPart = StateObject[newPart] = {};\n        } else {\n            nextPart = StateObject[newPart];\n        }\n    } else {\n        const isEndOfPath = count === length - 1;\n        const newPart = (addressParts[count] + '').trim();\n        if (nextPart[newPart] === undefined) {\n\n            const machine = isEndOfPath ? isCollection ? state : stateMachine(state, nextPart[newPart]) : {};\n            nextPart = nextPart[newPart] = machine\n            if (isEndOfPath) {\n                return;\n            }\n        } else {\n            nextPart = nextPart[newPart];\n            if (isEndOfPath) {\n                return;\n            }\n        }\n\n    }\n    count++;\n    createAddress(addressParts, count, state, length, isCollection, nextPart);\n}\n\nexport default createAddress;","import createAddress from './create-address';\n\nexport default function StateObject(address, state) {\n    const addressParts = address[0].split('>');\n    const addressPartsLength = addressParts.length;\n\n    createAddress(\n        addressParts,\n        0,\n        state,\n        addressPartsLength,\n        false,\n        null\n    );\n    return StateObject\n}","import StateObject from './state-object';\nimport createAddress from './create-address';\n\n\nconst checkType = type => {\n    switch (type) {\n        case Array:\n            return [];\n        case Object:\n            return '';\n        default:\n            return type;\n            // if (Array.isArray()) {\n            //     return type;\n            // }\n    }\n}\n\nexport default (type, hasEntries = false) => {\n\n    // Get the corresponding dataset according to the type.\n    const dataset = checkType(type);\n    const isArray = Array.isArray(dataset);\n    const isObject = isArray ? false : ((dataset) + '').indexOf('Object') >= 0;\n\n    // Check if the array has entries.\n    const data = isArray && hasEntries ? type : dataset.map((item, i) => [i, item]);\n\n    // A Deletable clone. \n    let initalDataClone = Array.from(data);\n\n    const properties = {\n        data,\n        initialData: initalDataClone, // Clone inital data.\n        get entries() {\n            return this.data;\n        },\n        get states() {\n            return this.data.map(entry => entry[1]);\n        },\n        get ids() {\n            return this.data.map(entry => entry[0]);\n        },\n        update(newEntries) {\n            this.data = newEntries;\n            return this;\n        },\n        get firstId() {\n            return this.data[0][0];\n        },\n        get lastId() {\n            const length = this.data.length;\n            return this.data[length - 1][0];\n        },\n        get nextId() {\n            const length = this.data.length;\n            return this.data[length - 1][0];\n        },\n        get lastIndex() {\n            return this.data.length - 1;\n        },\n        get nextIndex() {\n            return this.data.length;\n        },\n        get firstState() {\n            return this.data[0][1];\n        },\n        get lastState() {\n            const length = this.data.length - 1;\n            console.log(length)\n            return this.data[length][1];\n        },\n        get firstEntry() {\n            return this.data[0];\n        },\n        get lastEntry() {\n            const length = this.data.length;\n            return this.data[length - 1];\n        },\n        get length() {\n            return this.data.length;\n        },\n    }\n    // return properties;\n    return (address) => {\n\n        const addressParts = address[0].split('>');\n        const addressPartsLength = addressParts.length;\n\n        createAddress(\n            addressParts,\n            0,\n            properties,\n            addressPartsLength,\n            true,\n            null\n        );\n    }\n}\n\n\n\n// get lastRemovedIds(){\n// \treturn \n// }\n// get initalLength() {\n//     return initalDataClone.length;\n// }\n// get initalEntries() {\n//     return initalDataClone;\n// }\n// get initalIds() {\n//     return initalDataClone.map(entry => entry[0]);\n// }\n// get initalStates() {\n//     return initalDataClone.map(entry => entry[0]);\n// }"],"names":["stateMachine","state","stateObject","callback","createAddress","addressParts","count","length","isCollection","nextPart","newPart","trim","StateObject","undefined","isEndOfPath","machine","address","split","addressPartsLength","checkType","type","Array","Object","hasEntries","dataset","isArray","isObject","indexOf","data","map","item","i","initalDataClone","from","properties","entries","states","entry","ids","newEntries","firstId","lastId","nextId","lastIndex","nextIndex","firstState","lastState","log","firstEntry","lastEntry"],"mappings":"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"}