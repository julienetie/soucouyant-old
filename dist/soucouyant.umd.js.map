{"version":3,"file":"soucouyant.umd.js","sources":["../src/cache.js","../src/accumilator.js","../src/create-address.js","../src/state-object.js","../src/collection.js"],"sourcesContent":["export default {\n\tsubscriptions: {}\n}","import cache from './cache';\n\n/** \n Accumilates frames.\n\n**/\nconst accumilator = [\n    []\n];\nconst uniqueStateReferences = [];\n\nconst persistence = {\n    options: {\n        mergeFidelity: 0,\n    }\n};\n\n// Update settings.\nexport const persistenceSettings = options => Object.assign(persistence.options, options);\n\n\n// Adds a new state to the accumilator \n// May create a new frame to do so.\nexport const addNewState = (state, identity) => {\n    const currentTimeStamp = Date.now();\n    const mergeFidelity = persistence.options.mergeFidelity;\n    // Check unique states and add the state if does not yet exist.\n    // Directly reference the existing state.\n    const stateAsString = JSON.stringify(state);\n    const uniqueStateReferencesLength = uniqueStateReferences.length;\n\n    let stateExist = false;\n    let directReference;\n    for (let i = 0; i < uniqueStateReferencesLength; i++) {\n        const uniqueState = uniqueStateReferences[i];\n        const hasExistingState = JSON\n            .stringify(uniqueState) === stateAsString;\n        if (hasExistingState) {\n            directReference = uniqueState;\n            stateExist = true;\n            break;\n        }\n    }\n\n    if (stateExist === false) {\n        uniqueStateReferences.push(state);\n        directReference = uniqueStateReferences[uniqueStateReferences.length - 1];\n    }\n\n    // Find frame by timestamp\n    const accumilatorLength = accumilator.length;\n    const lastFrame = accumilator[accumilatorLength - 1];\n    const lastFrameTimeStamp = lastFrame[0];\n\n    // If within proximity merge. \n    const withinMergePeriod = lastFrameTimeStamp + mergeFidelity > currentTimeStamp;\n    if (withinMergePeriod) {\n        // merge to last frame\n        lastFrame.push([identity, directReference]);\n    } else {\n        // Add new frame.\n        accumilator.push([\n            currentTimeStamp, [\n                identity,\n                directReference\n            ]\n        ]);\n    }\n\n    console.log('cache',cache)\n    const subscriptions = cache.subscriptions;\n    // Execute subscriptions\n    if (subscriptions[identity] === undefined) {\n        subscriptions[identity] = {};\n    }\n    const subIdentity = subscriptions[identity];\n    const subIdentityLength = Object.keys(subIdentity).length;\n\n    for(let ref in subIdentity){\n        subIdentity[ref](directReference, identity, currentTimeStamp);\n    }\n\n    // console.log('accumilator', JSON.stringify(accumilator, null, '\\t'));\n}\n\nexport const getCurrentState = (identity) => {\n    const accumilatorLength = accumilator.length;\n    for (let i = accumilatorLength; i > -1; --i) {\n        const frame = accumilator[i] || [];\n        const frameLength = frame.length;\n        for (let j = 0; j < frameLength; j++) {\n            if (frame[j][0] === identity) {\n                return frame[j][1];\n            }\n        }\n    }\n}","import StateObject from './state-object';\nimport { addNewState, getCurrentState } from './accumilator';\nimport cache from './cache';\n\nconst stateMachine = (state, identity) => {\n    const stateModifier = callback => {\n        const lastState = state === null ? getCurrentState(identity) : state;\n        const newState = callback(lastState);\n        addNewState(newState, identity);\n        if (state !== null) {\n            state = null;\n        }\n        return newState;\n    }\n\n    stateModifier.subscribe = (ref, callback) => {\n        if (cache.subscriptions[identity] === undefined) {\n            cache.subscriptions[identity] = {};\n        }\n\n        if (cache.subscriptions[identity][ref] === undefined) {\n            cache.subscriptions[identity][ref] = callback;\n        } else {\n            console.error(`The subscriptions reference ${ref} is already in use for identity ${identity}`);\n        }\n    }\n\n    return stateModifier;\n}\n\nlet identity = -1;\nconst createAddress = (addressParts, count, state, length, isCollection, nextPart) => {\n    if (nextPart === null) {\n        const newPart = (addressParts[count] + '').trim();\n        if (StateObject[newPart] === undefined) {\n            nextPart = StateObject[newPart] = {};\n        } else {\n            nextPart = StateObject[newPart];\n        }\n    } else {\n        const isEndOfPath = count === length - 1;\n        const newPart = (addressParts[count] + '').trim();\n        if (nextPart[newPart] === undefined) {\n            identity++;\n            const machine = isEndOfPath ? isCollection ? state : stateMachine(state, identity) : {};\n            nextPart = nextPart[newPart] = machine;\n            if (isEndOfPath) {\n                return;\n            }\n        } else {\n            nextPart = nextPart[newPart];\n            if (isEndOfPath) {\n                return;\n            }\n        }\n\n    }\n    count++;\n    createAddress(addressParts, count, state, length, isCollection, nextPart);\n}\n\nexport default createAddress;","import createAddress from './create-address';\n\nexport default function StateObject(address, state) {\n    const addressParts = address[0].split('>');\n    const addressPartsLength = addressParts.length;\n\n    createAddress(\n        addressParts,\n        0,\n        state,\n        addressPartsLength,\n        false,\n        null\n    );\n    return StateObject\n}","import StateObject from './state-object';\nimport createAddress from './create-address';\nimport { addNewState, getCurrentState } from './accumilator';\n\nconst checkType = type => {\n    switch (type) {\n        case Array:\n            return [];\n        case Object:\n            return '';\n        default:\n            return type;\n            // if (Array.isArray()) {\n            //     return type;\n            // }\n    }\n}\n\nlet identity  = -1;\nexport default (type, hasEntries = false) => {\n identity++;\n    // Get the corresponding dataset according to the type.\n    const dataset = checkType(type);\n    const isArray = Array.isArray(dataset);\n    const isObject = isArray ? false : ((dataset) + '').indexOf('Object') >= 0;\n\n    // Check if the array has entries.\n    const data = isArray && hasEntries ? type : dataset.map((item, i) => [i, item]);\n\n    // A Deletable clone. \n    let initalDataClone = Array.from(data);\n\n    // Inital update\n    addNewState(data, identity);\n\n    const properties = {\n        data,\n        initialData: initalDataClone, // Clone inital data.\n        get entries() {\n            return getCurrentState(identity);\n        },\n        get states() {\n            return this.data.map(entry => entry[1]);\n        },\n        get ids() {\n            return this.data.map(entry => entry[0]);\n        },\n        update(newEntries) {\n            addNewState(newEntries, identity);\n        },\n        get firstId() {\n            return this.data[0][0];\n        },\n        get lastId() {\n            const length = this.data.length;\n            return this.data[length - 1][0];\n        },\n        get nextId() {\n            const length = this.data.length;\n            return this.data[length - 1][0];\n        },\n        get lastIndex() {\n            return this.data.length - 1;\n        },\n        get nextIndex() {\n            return this.data.length;\n        },\n        get firstState() {\n            return this.data[0][1];\n        },\n        get lastState() {\n            const length = this.data.length - 1;\n            console.log(length)\n            return this.data[length][1];\n        },\n        get firstEntry() {\n            return this.data[0];\n        },\n        get lastEntry() {\n            const length = this.data.length;\n            return this.data[length - 1];\n        },\n        get length() {\n            return this.data.length;\n        },\n    }\n    // return properties;\n    return (address) => {\n\n        const addressParts = address[0].split('>');\n        const addressPartsLength = addressParts.length;\n\n        createAddress(\n            addressParts,\n            0,\n            properties,\n            addressPartsLength,\n            true,\n            null\n        );\n    }\n}\n\n\n\n// get lastRemovedIds(){\n// \treturn \n// }\n// get initalLength() {\n//     return initalDataClone.length;\n// }\n// get initalEntries() {\n//     return initalDataClone;\n// }\n// get initalIds() {\n//     return initalDataClone.map(entry => entry[0]);\n// }\n// get initalStates() {\n//     return initalDataClone.map(entry => entry[0]);\n// }"],"names":["accumilator","uniqueStateReferences","persistence","addNewState","state","identity","currentTimeStamp","Date","now","mergeFidelity","options","stateAsString","JSON","stringify","uniqueStateReferencesLength","length","stateExist","directReference","i","uniqueState","hasExistingState","push","accumilatorLength","lastFrame","lastFrameTimeStamp","withinMergePeriod","log","cache","subscriptions","undefined","subIdentity","subIdentityLength","Object","keys","ref","getCurrentState","frame","frameLength","j","stateMachine","stateModifier","lastState","newState","callback","subscribe","error","createAddress","addressParts","count","isCollection","nextPart","newPart","trim","StateObject","isEndOfPath","machine","address","split","addressPartsLength","checkType","type","Array","hasEntries","dataset","isArray","isObject","indexOf","data","map","item","initalDataClone","from","properties","entries","states","entry","ids","newEntries","firstId","lastId","nextId","lastIndex","nextIndex","firstState","firstEntry","lastEntry"],"mappings":"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"}